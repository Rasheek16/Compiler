#!/usr/bin/env python3
from tokenizer import tokenize
from parser import Parser
from assembly_generation import AssemblyGenerator, Mov,Ret
# Example code to tokenize and parse
if __name__ == "__main__":
    code = """
    int main(void) {
        return 5;
    }
    """

    try:
        # Tokenize the code
        tokens = tokenize(code)
        print("Tokens:")
        for token in tokens:
            print(token)

        parser = Parser(tokens)
        program = parser.parse()

        print("\nParsed program:")
        print(f"Function Name: {program.function.name.value}")
        print(f"Return Value: {program.function.body.expression.value}")

        generator = AssemblyGenerator()
        generator.generate(program)
        assembly = generator.get_assembly()
        print("\nGenerated Assembly:")
        for instr in assembly:
            if isinstance(instr, Mov):
                print(f"mov {instr.src.value}, {instr.dst.name}")
            elif isinstance(instr, Ret):
                print("ret")

    except RuntimeError as e:
        print(f"Error: {e}")
